/**
    This file is part of coinbase-pro-client.

    coinbase-pro-client is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with coinbase-pro-client.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.erc.coinbase.pro;

import java.security.GeneralSecurityException;
import java.util.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.erc.coinbase.pro.exceptions.SignatureException;

/**
 * Signature
 * The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC.
 * The base64-decoded secret key on the string:
 * 		timestamp + method + requestPath + body
 * and base64-encode the output.
 * The timestamp value is the same as the CB-ACCESS-TIMESTAMP header.
 *
 */
final class Signature {

	private String signature;
	
	public Signature(String secretKey,String requestPath, String method, String body, String timestamp) throws SignatureException {
        try {
            String prehash = timestamp + method.toUpperCase() + requestPath + body;
            byte[] secretDecoded = Base64.getDecoder().decode(secretKey);
            Mac sha256 = Mac.getInstance("HmacSHA256");
            SecretKeySpec keyspec = new SecretKeySpec(secretDecoded, sha256.getAlgorithm());
            sha256.init(keyspec);
            signature = Base64.getEncoder().encodeToString(sha256.doFinal(prehash.getBytes()));
        } catch (GeneralSecurityException  e) {
            throw new SignatureException("Cannot set up authentication headers.",e);
        }
	}
	
	@Override
	public String toString() {
		return signature;
	}
}
